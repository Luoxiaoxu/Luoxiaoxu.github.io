<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[根据关键词组合，爬取知乎某个问题下所有含有关键词的回答]]></title>
    <url>%2Fzhihuspider.html</url>
    <content type="text"><![CDATA[&emsp;&emsp; 在浏览知乎问题过程中，为了通过关键字快速定位到自己想要的回答，写了这个爬虫程序。可以根据问题ID和关键词组合，保存所有含有关键词的回答。源代码下载：Luoxiaoxu’s github &emsp;&emsp;其中，必须含有的关键词以空格间隔，或含有的关键词以+间隔，例如，查找知乎ID为23437659的问题：“国内你最喜欢的城市（除家乡外生活过的城市）是哪里？为什么？”，要求回答中含有杭州，同时含有南京或武汉，则输入关键词为“杭州&emsp;南京+武汉”。其中，问题ID从问题链接中即可得到，如上述问题链接为https://www.zhihu.com/question/23437659，问题ID即为链接后面的数字。 12请输入问题编号：23437659请输入关键字(同时含有以空格间隔，或含有用+间隔)：杭州 南京+武汉 &emsp;&emsp;符合条件的回答保存在csv文件和txt文件中，其中，csv文件只含有所有符合条件的回答的链接。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133#!/user/bin/python#-*-coding:utf-8-*-#author：luoxiaoxu#blog:xiaoxu.online#Filename: ZhihuSpider_keywords.py#Function: 爬取知乎问题中含有特定关键词的回答from bs4 import BeautifulSoupimport requestsimport osimport reimport timeimport csvimport jsondef GetAnswer(*Question_ID): if len(Question_ID)==0: Question_ID=input("请输入问题编号：") keyword=input('请输入关键字(同时含有以空格间隔，或含有用+间隔)：') # 例如，必须含有杭州，同时含有武汉或南京，输入“杭州 武汉+南京” keywords=keyword.split() #下载全部答案，直接enter if keyword=='': keyword='无' headers = &#123;'User-Agent':"Mozilla/5.0 (Windows NT 10.0; Win64; x64)"\ " AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"&#125; limit=10 #每次显示的答案个数 offset=0 #下一次显示的回答偏移量 total_num=10 #答案个数，初始设为limit browse_num=0 #已经遍历的回答个数 record_num=0 #含关键字的回答个数 title='' if not os.path.exists('知乎下载/'): os.makedirs('知乎下载/') print('\n正在爬取……\n') while browse_num&lt;total_num: url = "https://www.zhihu.com/api/v4/questions/&#123;Question_ID&#125;/answers?include=content&amp;limit="\ "&#123;limit&#125;&amp;offset=&#123;offset&#125;&amp;platform=desktop&amp;sort_by=default"\ .format(Question_ID=str(Question_ID),limit=str(limit),offset=str(offset)) res=requests.get(url,headers=headers) try: res=json.loads(res.content) except: print('问题编号输入错误！\n') return None total_num=res['paging']['totals'] cons=res['data'] if cons is not None: if total_num&lt;=0: print('该问题暂时无答案！') break if title=='': title=cons[0]['question']['title'] path_csv,path_txt=CreativeFile(title,keyword) #创建csv和txt文件，csv文件为保存所有含有关键词回答的链接列表 for con in cons: browse_num+=1 Re=re.compile(r'&lt;[^&gt;]+&gt;',re.S) answer_detail=Re.sub('',con['content']) #获取具体回答内容 flag=True if len(keywords)&gt;0: flag=HasKeywords(answer_detail,keyword) #查询是否有关键词 if flag: record_num+=1 author_name=con['author']['name'] author_url='https://www.zhihu.com/people/'+con['author']['url_token'] if not author_name=='匿名用户' else ' ' answer_url='https://www.zhihu.com/question/'+str(Question_ID)+'/answer/'+str(con['id']) Save2File_csv(path_csv,[str(record_num)+'.',author_name,answer_url,author_url]) answer_txt=[str(record_num)+'.',author_name+' 主页:'+author_url] answer_txt.append('\n\n链接:'+answer_url+'\n') answer_txt.append('\n'+answer_detail+\ '\n-------------------------------------------------------------------------------\n') Save2File_txt(path_txt,answer_txt) print('已保存第%d个回答\n'%record_num) offset+=len(cons) if len(cons)&lt;limit: #已爬取到最后一页 break if len(keywords)==0: print('爬取完成，已保存全部%d个回答！\n'%record_num) elif record_num&gt;0: print('爬取完成，已保存%d个与关键词有关的回答！\n'%record_num) else: os.remove(path_csv) os.remove(path_txt) print('未找到与关键词有关的答案\n') def Save2File_csv(path,content): f=open(path,'a+') writer=csv.writer(f) writer.writerow(content) f.close()def Save2File_txt(path,contents): f=open(path,'a+',encoding='utf-8') for content in contents: f.writelines(content) f.writelines('\n')def HasKeywords(answer_detail,keyword): #判断是否含有所有关键词 flag=True for key in keyword.split(): flag2=False for sub_key in key.split('+'): flag2=flag2 or answer_detail.find(sub_key)&gt;0 if flag2: break flag=flag and flag2 if not flag: return False return Truedef CreativeFile(title,keyword): path_csv='知乎下载/'+title+'.csv' path_txt='知乎下载/'+title+'.txt' if os.path.exists(path_csv): #若文件存在，清空 f=open(path_csv,'w') f.seek(0) f.truncate() f.close() if os.path.exists(path_txt): f=open(path_txt,'w') f.seek(0) f.truncate() f.close() Save2File_csv(path_csv,[title]) Save2File_csv(path_csv,['关键字：'+keyword]) Save2File_csv(path_csv,['序号','作者昵称','回答链接','主页链接']) Save2File_txt(path_txt,[title,'关键字：'+keyword+'\n']) return path_csv,path_txtif __name__=='__main__': GetAnswer()]]></content>
      <categories>
        <category>Python练习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>zhihu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub Pages && Coding Pages && Hexo && 个人域名:个人博客搭建]]></title>
    <url>%2Fblogconstruct.html</url>
    <content type="text"><![CDATA[&emsp;&emsp;花了两天时间搭建了个人博客，期间参考了很多网络上的教程，同时也踩下了很多印象深刻的坑。关于博客搭建网上已经有很多人分享了经验，这里就不在重复了，这篇文章中主要记录一下自己在博客搭建过程中，所参考的教程，以及所遇到的问题和解决方法。 博客搭建环境配置&emsp; &emsp; 环境配置和软件安装主要参考《GitHub+Hexo 搭建个人网站详细教程》，包括GitHub创建个人仓库，Git、Node.js和Hexo的安装。所安装的软件版本如下： 1234567891011$ git --versiongit version 2.20.1.windows.1$node -vv10.15.0$ npm -v6.4.1$ hexo -vhexo: 3.8.0 &emsp; &emsp;根据该篇文章中的教程，进行博客的初始化，并将博客推送到GitHub仓库，之后便可以通过网址&lt;账户名&gt;.github.io访问个人博客。同时购买自己的个人域名，如果想同时将博客托管在Coding net上，此处可先不不要解析到自己的Github博客网址，下面会提到这个问题。 &emsp;&emsp;由于Github服务器在国外，访问速度有时候比较慢，导致博客打开较慢，同时Github封禁了百度爬虫，因此我们可以同时将自己的博客托管在Coding net上，通过域名分流解析，使得境内的访问解析到Coding net上。将Hexo博客部署到Coding net 参考教程《Hexo博客同时部署到GitHub和Coding》，该教程中注意，此处必须先将Hexo博客成功部署到Coding上，才能开启Coding 项目的Pages服务。 Next主题&emsp;&emsp;博客部署完成之后，就需要选择一个美观一点的主题。一开始自己选用的是BlueLake主题，但是主题配置过程中，出现了一些问题，由于这个主题使用人比较少，很多问题网上也找不到解决办法，所以推荐新手还是选择Next主题，用的人比较多，网上各种插件、教程也比较多。之后可以再选择其他好看的Hexo主题。 &emsp;&emsp;Next主题的配置主要参考教程《绝配：hexo+next主题及我走过的坑》。 注意： （1）由于6.0版后的Next主题更新已经转移到其他仓库，该教程中的Next主题安装命令应由 $ git clone https://github.com/iissnan/hexo-theme-next themes/next 修改为 $ git clone https://github.com/theme-next/hexo-theme-next themes/next （2）该教程中有教如何安装douban插件的，若安装了该插件必须注意不能够使用hexo d简写命令部署网站,必须使用全称hexo deploy，此外，部署的过程中还会出现错误： DeprecationWarning: fs.SyncWriteStream is deprecated. 这是由于node和hexo插件的版本带来的问题：在node8.x的版本中，fs.SyncWriteStream被弃用了。在网上 搜这个问题，有很多文章提到更新hexo-fs插件即可，但不知道为什么，更新之后还是存在这个问题。最后通过grep命令可以查询到fs.SyncWriteStream在*\node_modules\hexo-admin\node_modules\hexo-fs\lib\ fs.js文件的第718行，注释掉改行就可以了。 （3）其实next主题有很多介绍在主题config.yml文件中都有介绍，仔细看其中的介绍和所给出的链接网址，就可以知道其中各个插件有什么作用，并不需要一味的到网上找教程，因为next主题会不断更新，因此有些教程中有些细节和自己所下载的有些细小区别。 域名解析&emsp;&emsp;上述已经搭建好博客，接下来就可以将自己购买的域名绑定自己的博客地址了。同样可以使用第一个和第二个教程中介绍的方法进行解析设置。为了使博客能够快速打开，应将境内的访问解析到Coding net上，而将境外的访问解析到GitHub上。注意，此处应先将自己购买的域名绑定Coding net, 然后再绑定Github, 如果先绑定了Github，则在绑定Coding pages域名时，会出现域名未连通的提示。Coding pages给出的解释如下： 其他问题，可见Coding Pages 常见问题。 SEO优化&emsp;&emsp;部署完博客和绑定域名后，为了能够通过百度和谷歌搜索自己的博客，还需要为博客添加sitemape并进行SEO优化。添加百度sitemap方法可参考《Hexo 博客添加百度sitemap》, 添加谷歌sitemap以及SEO优化方法可见《Hexo博客Next主题SEO优化方法》 注意： (1)当百度站长添加管理的网站为Github网址，使用HTML标签验证时，使用HTML标签验证验证失败，原因：未知原因:301。不知道是不是因为Github封禁了百度爬虫的原因，此处可以改为自己绑定的所购买的域名。采用HTML标签验证，如果没成功的话(我就没成功)，可以再采用CNAME验证的方法。 (2)对于SEO优化中所提到的Baidu主动提交链接方法, 注意修改博客配置config.yml文件中的url为自己所购买的域名。此外，deploy有多个type时，如下： 12345678910deploy: - type: git repo: https://github.com/&lt;账户名称&gt;/&lt;账户名称&gt;.github.io.git branch: master - type: git repo: https://git.coding.net/&lt;账户名称&gt;/&lt;账户名称&gt;.git branch: master- type: baidu_url_submitter type前面的横杠 - 不能少，否则会出现错误： FATAL duplicated mapping key at line **, column **: type: baidu_url_submitter 总结&emsp;&emsp;以上就是自己搭建博客过程，和所参考的文章。next主题自带有很多功能，可以在主题配置config.yml文件中进行探索。]]></content>
      <categories>
        <category>编程开发</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
        <tag>博客</tag>
      </tags>
  </entry>
</search>
